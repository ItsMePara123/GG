```bash
#!/bin/bash

# Colors
RED="\e[31m"
GREEN="\e[32m"
YELLOW="\e[33m"
CYAN="\e[36m"
WHITE="\e[37m"
RESET="\e[0m"
BOLD="\e[1m"
MAGENTA="\e[35m"

# Helper: decode base64 in a cross-platform way
decode_b64() {
  local input="$1"
  if decoded=$(echo "$input" | base64 --decode 2>/dev/null); then
    printf "%s" "$decoded"
  elif decoded=$(echo "$input" | base64 -D 2>/dev/null); then
    printf "%s" "$decoded"
  elif command -v openssl &>/dev/null; then
    printf "%s" "$input" | openssl base64 -d 2>/dev/null || return 1
  else
    return 1
  fi
}

# Check if curl is installed
check_curl() {
  if ! command -v curl &>/dev/null; then
    echo -e "${RED}${BOLD}Error: curl is not installed.${RESET}"
    echo -e "${YELLOW}Installing curl...${RESET}"
    if command -v apt-get &>/dev/null; then
      sudo apt-get update && sudo apt-get install -y curl
    elif command -v yum &>/dev/null; then
      sudo yum install -y curl
    elif command -v dnf &>/dev/null; then
      sudo dnf install -y curl
    else
      echo -e "${RED}Could not install curl automatically. Please install it manually.${RESET}"
      exit 1
    fi
    echo -e "${GREEN}curl installed successfully!${RESET}"
  fi
}

# Function to run remote scripts (accepts base64-encoded URL)
run_remote_script() {
  local encoded_url="$1"
  local url
  url=$(decode_b64 "$encoded_url") || { echo -e "${RED}Failed to decode URL${RESET}"; return 1; }

  local script_name=$(basename "$url" .sh)
  script_name=$(echo "$script_name" | sed 's/.*/\u&/')

  echo -e "${YELLOW}${BOLD}Running: ${CYAN}${script_name}${RESET}"
  check_curl

  local temp_script
  temp_script=$(mktemp)
  echo -e "${YELLOW}üì• Downloading script...${RESET}"
  if curl -fsSL "$url" -o "$temp_script"; then
    echo -e "${GREEN}‚úî Download successful${RESET}"
    chmod +x "$temp_script"
    bash "$temp_script"
    local exit_code=$?
    rm -f "$temp_script"
    if [ $exit_code -eq 0 ]; then
      echo -e "${GREEN}‚úî Script executed successfully${RESET}"
    else
      echo -e "${RED}‚úò Script execution failed with exit code: $exit_code${RESET}"
    fi
  else
    echo -e "${RED}‚úò Failed to download script${RESET}"
    rm -f "$temp_script"
  fi
  echo
  read -p "Press Enter to continue..."
}

# Function to show system info
system_info() {
  echo -e "${BOLD}SYSTEM INFORMATION${RESET}"
  echo "Hostname: $(hostname)"
  echo "User: $(whoami)"
  echo "Directory: $(pwd)"
  echo "System: $(uname -srm)"
  echo "Uptime: $(uptime -p)"
  echo "Memory: $(free -h | awk '/Mem:/ {print $3\"/\"$2}')"
  echo "Disk: $(df -h / | awk 'NR==2 {print $3\"/\"$2 \" (\"$5\")\"}')"
  echo
  read -p "Press Enter to continue..."
}

# Function to show Cloudflare settings
cloudflare_settings() {
  clear
  echo -e "${MAGENTA}${BOLD}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${RESET}"
  echo -e " üåê ${CYAN}${BOLD}CLOUDFLARE SETTINGS${RESET}"
  echo -e "${MAGENTA}${BOLD}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${RESET}\n"

  echo -e " ‚öôÔ∏è ${GREEN}PANEL SETTINGS${RESET}"
  echo -e " üîí Type : ${CYAN}HTTPS${RESET}"
  echo -e " üñ•Ô∏è Service: ${CYAN}localhost${RESET}\n"

  echo -e " ‚öôÔ∏è ${GREEN}NODE SETTINGS${RESET}"
  echo -e " üîí Type : ${CYAN}HTTPS${RESET}"
  echo -e " üñ•Ô∏è Service: ${CYAN}localhost:8080${RESET}\n"

  echo -e "${MAGENTA}${BOLD}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${RESET}"
  read -p "Press Enter to continue..."
}

# Function to generate and display menu
show_menu() {
  clear
  menu_content=$(cat <<EOF
${BOLD}========== MAIN MENU ==========${RESET}
${BOLD}1. Ptero Panel${RESET}
${BOLD}2. Ptero Wing${RESET}
${BOLD}3. Ptero Update${RESET}
${BOLD}4. Ptero Uninstall${RESET}
${BOLD}5. Blueprint Install${RESET}
${BOLD}6. Cloudflare${RESET}
${BOLD}7. Theme Install${RESET}
${BOLD}8. Playit Setup${RESET}
${BOLD}9. Cloudflare Settings${RESET}
${BOLD}10. System Info${RESET}
${BOLD}11. Ptero Bot${RESET}
${BOLD}12. Back Up${RESET}
${BOLD}13. Nginx Reload${RESET}
${BOLD}14. Ptero Restart${RESET}
${BOLD}15. Idx Vps Maker${RESET}
${BOLD}16. Github Vps Maker${RESET}
${BOLD}17. Auto Sudo${RESET}
${BOLD}0. Exit${RESET}
${BOLD}===============================${RESET}
EOF
)
  echo -e "${CYAN}${menu_content}${RESET}"
  echo -ne "${BOLD}Enter your choice [0-17]: ${RESET}"
  echo -e "$menu_content" > menu.txt
}

# Base64-encoded URLs
B_PTERO_INSTALL="aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL0l0c01lUGFyYTEyMy9HRy9yZWZzL2hlYWRzL21haW4vcHRlcm9pbnN0YWxs"
B_WING_SPAT="aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL0l0c01lUGFyYTEyMy9HRy9yZWZzL2hlYWRzL21haW4vd2luZ3NwdGVybw=="
B_UPDATE_PTERO="aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL0l0c01lUGFyYTEyMy9HRy9yZWZzL2hlYWRzL21haW4vdXBkYXRlcHRlcm8="
B_UNINSTALL_PTERO="aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL0l0c01lUGFyYTEyMy9HRy9yZWZzL2hlYWRzL21haW4vdW5pbnN0YWxscHRlcm8="
B_PARACOM="aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL1BhcmFOb29iMTIzL0JsdWVwcmludC9yZWZzL2hlYWRzL21haW4vcGFyYWNvbQ=="
B_CLOUDFLARE_INSTALL="aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL0l0c01lUGFyYTEyMy9HRy9yZWZzL2hlYWRzL21haW4vY2xvdWRmbGFyZWluc3RhbGw="
B_THEME_MENU="aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL0l0c01lUGFyYTEyMy9HRy9yZWZzL2hlYWRzL21haW4vdGhlbWVtZW51"
B_PLAYIT="aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL0l0c01lUGFyYTEyMy9HRy9yZWZzL2hlYWRzL21haW4vcGxheWl0"
B_PTERO_BOT="aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL0l0c01lUGFyYTEyMy9HRy9yZWZzL2hlYWRzL21haW4vUHRlcm9Cb3Q="
B_BACKUP="aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL0l0c01lUGFyYTEyMy9HRy9yZWZzL2hlYWRzL21haW4vQmFja1Vw"
B_NGINX_RELOAD="aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL0l0c01lUGFyYTEyMy9HRy9yZWZzL2hlYWRzL21haW4vTmdpbnhSZWxvYWQ="
B_RESTART_PTERO="aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL0l0c01lUGFyYTEyMy9HRy9yZWZzL2hlYWRzL21haW4vUmVzdGFydFB0ZXJv"
B_VPS_MAKER="aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL0l0c01lUGFyYTEyMy9HRy9yZWZzL2hlYWRzL21haW4vVnBzTWFrZXI="
B_VPS_MENU="aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL0l0c01lUGFyYTEyMy9HRy9yZWZzL2hlYWRzL21haW4vVnBzTWVudQ=="
B_AUTO_SUDO="aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL0l0c01lUGFyYTEyMy9HRy9yZWZzL2hlYWRzL21haW4vQXV0b1N1ZG8="

# Main loop
while true; do
  show_menu
  read -r choice
  case $choice in
    1) run_remote_script "$B_PTERO_INSTALL" ;;
    2) run_remote_script "$B_WING_SPAT" ;;
    3) run_remote_script "$B_UPDATE_PTERO" ;;
    4) run_remote_script "$B_UNINSTALL_PTERO" ;;
    5) run_remote_script "$B_PARACOM" ;;
    6) run_remote_script "$B_CLOUDFLARE_INSTALL" ;;
    7) run_remote_script "$B_THEME_MENU" ;;
    8) run_remote_script "$B_PLAYIT" ;;
    9) cloudflare_settings ;;
    10) system_info ;;
    11) run_remote_script "$B_PTERO_BOT" ;;
    12) run_remote_script "$B_BACKUP" ;;
    13) run_remote_script "$B_NGINX_RELOAD" ;;
    14) run_remote_script "$B_RESTART_PTERO" ;;
    15) run_remote_script "$B_VPS_MAKER" ;;
    16) run_remote_script "$B_VPS_MENU" ;;
    17) run_remote_script "$B_AUTO_SUDO" ;;
    0) echo "Exiting..."; exit 0 ;;
    *) echo -e "${RED}${BOLD}Invalid option!${RESET}"; read -p "Press Enter to continue..." ;;
  esac
done
```
