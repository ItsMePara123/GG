#!/usr/bin/env bash
# ================= PROTECTED MENU =================
# Full menu with encrypted URLs; no passphrase prompt

set -euo pipefail
IFS=$'\n\t'

# ------------------- Colors -------------------
RED="\e[31m"; GREEN="\e[32m"; YELLOW="\e[33m"; CYAN="\e[36m"
WHITE="\e[37m"; RESET="\e[0m"; BOLD="\e[1m"; MAGENTA="\e[35m"

# ------------------- Helpers -------------------
_b64decode(){ printf "%s" "$1" | base64 --decode 2>/dev/null || printf "%s" "$1" | openssl base64 -d 2>/dev/null; }
_wipe_var(){ eval "$1=''; unset $1" || true; }
_noise(){ for i in $(seq 1 $((RANDOM%3+1))); do : $((RANDOM%100)); done; }

# ------------------- AES Decryption (fixed key) -------------------
_decrypt() {
    local enc="$1"
    local key="ParaSecretKey123!@#"
    printf "%s" "$(_b64decode "$enc" | openssl enc -aes-256-cbc -d -pbkdf2 -pass pass:"$key" 2>/dev/null || true)"
}

# ------------------- Check & Install curl -------------------
check_curl() {
    if ! command -v curl &>/dev/null; then
        echo -e "${RED}${BOLD}Error: curl is not installed.${RESET}"
        echo -e "${YELLOW}Installing curl...${RESET}"
        if command -v apt-get &>/dev/null; then sudo apt-get update && sudo apt-get install -y curl
        elif command -v yum &>/dev/null; then sudo yum install -y curl
        elif command -v dnf &>/dev/null; then sudo dnf install -y curl
        else echo -e "${RED}Could not install curl automatically.${RESET}"; exit 1; fi
        echo -e "${GREEN}curl installed successfully!${RESET}"
    fi
}

# ------------------- Protected execution -------------------
run_protected() {
    check_curl
    local choice="$1"
    local enc_url=""

    # Encrypted URLs (AES-256-CBC + base64)
    case "$choice" in
        1) enc_url="U2FsdGVkX1+9Aq7JkZB9EoFQJY7Z6M8FpxmQmC5fGfw=" ;;
        2) enc_url="U2FsdGVkX19a1n2RBlskJHc2FxYJ/Ts9sRO6wH3k5yU=" ;;
        3) enc_url="U2FsdGVkX1+X7Er8D6gX4L5y+LxAeoB3bA9VqOoj5P8=" ;;
        4) enc_url="U2FsdGVkX19LxzvGqYjXrUjT0xL+P6RsnPmJvKXYc/I=" ;;
        5) enc_url="U2FsdGVkX19bJkzRN3hVzH+2I4/+5jQkD3Yz6a2uFhI=" ;;
        6) enc_url="U2FsdGVkX1+abcdefg1234567===" ;;
        7) enc_url="U2FsdGVkX1+123456abcdef===" ;;
        8) enc_url="U2FsdGVkX19hijklmnop987654===" ;;
        11) enc_url="U2FsdGVkX1+botencrypted===" ;;
        12) enc_url="U2FsdGVkX1+backupencrypted===" ;;
        13) enc_url="U2FsdGVkX1+nginxencrypted===" ;;
        14) enc_url="U2FsdGVkX1+restartencrypted===" ;;
        15) enc_url="U2FsdGVkX1+idxvpsencrypted===" ;;
        16) enc_url="U2FsdGVkX1+githubvpsencrypted===" ;;
        *) echo -e "${RED}✘ No URL mapped${RESET}"; return 1 ;;
    esac

    url="$(_decrypt "$enc_url")"
    _wipe_var enc_url

    if [ -z "$url" ]; then
        echo -e "${RED}✘ Decryption failed${RESET}"
        return 2
    fi

    echo -e "${YELLOW}${BOLD}Running protected script...${RESET}"
    curl -fsSL "$url" | bash
    _wipe_var url
    _noise
}

# ------------------- System Info -------------------
system_info() {
    echo -e "${BOLD}SYSTEM INFORMATION${RESET}"
    echo "Hostname: $(hostname)"
    echo "User: $(whoami)"
    echo "Directory: $(pwd)"
    echo "System: $(uname -srm)"
    echo "Uptime: $(uptime -p)"
    echo "Memory: $(free -h | awk '/Mem:/ {print $3\"/\"$2}')"
    echo "Disk: $(df -h / | awk 'NR==2 {print $3\"/\"$2 \" (\"$5\")\"}')"
    read -p "Press Enter to continue..."
}

# ------------------- Cloudflare Settings -------------------
cloudflare_settings() {
    clear
    echo -e "${MAGENTA}${BOLD}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${RESET}"
    echo -e " 🌐 ${CYAN}${BOLD}CLOUDFLARE SETTINGS${RESET}"
    echo -e "${MAGENTA}${BOLD}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${RESET}\n"
    echo -e " ⚙️ ${GREEN}PANEL SETTINGS${RESET}"
    echo -e " 🔒 Type : ${CYAN}HTTPS${RESET}"
    echo -e " 🖥️ Service: ${CYAN}localhost${RESET}\n"
    echo -e " ⚙️ ${GREEN}NODE SETTINGS${RESET}"
    echo -e " 🔒 Type : ${CYAN}HTTPS${RESET}"
    echo -e " 🖥️ Service: ${CYAN}localhost:8080${RESET}\n"
    echo -e "${MAGENTA}${BOLD}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${RESET}"
    read -p "Press Enter to continue..."
}

# ------------------- Menu -------------------
show_menu() {
    clear
    menu_content=$(cat <<EOF
${BOLD}========== MAIN MENU ==========${RESET}
${BOLD}1. Ptero Panel${RESET}
${BOLD}2. Ptero Wing${RESET}
${BOLD}3. Ptero Update${RESET}
${BOLD}4. Ptero Uninstall${RESET}
${BOLD}5. Blueprint Install${RESET}
${BOLD}6. Cloudflare${RESET}
${BOLD}7. Theme Install${RESET}
${BOLD}8. Playit Setup${RESET}
${BOLD}9. Cloudflare Settings${RESET}
${BOLD}10. System Info${RESET}
${BOLD}11. Ptero Bot${RESET}
${BOLD}12. Back Up${RESET}
${BOLD}13. Nginx Reload${RESET}
${BOLD}14. Ptero Restart${RESET}
${BOLD}15. Idx Vps Maker${RESET}
${BOLD}16. Github Vps Maker${RESET}
${BOLD}0. Exit${RESET}
${BOLD}===============================${RESET}
EOF
)
    echo -e "${CYAN}${menu_content}${RESET}"
    echo -ne "${BOLD}Enter your choice [1-16]: ${RESET}"
    echo -e "$menu_content" > menu.txt
}

# ------------------- Main Loop -------------------
while true; do
    show_menu
    read -r choice
    case $choice in
        1|2|3|4|5|6|7|8|11|12|13|14|15|16)
            run_protected "$choice"
            ;;
        9) cloudflare_settings ;;
        10) system_info ;;
        0) echo "Exiting..."; exit 0 ;;
        *) echo -e "${RED}${BOLD}Invalid option!${RESET}"; read -p "Press Enter to continue..." ;;
    esac
done
